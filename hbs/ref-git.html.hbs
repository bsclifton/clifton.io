{{#document 'ref-git'}}
  <section id="page-content">
    <div class="container">
      <h1>{{htmlWebpackPlugin.options.title.git}}</h1>
{{#markdown}}
## Remove last commit
`git reset --hard HEAD^`

## Set upstream on local
`git branch --set-upstream-to=upstream/foo`
`git branch -u upstream/foo`

## Push local over a remote with different name
`git push origin local-name:remote-name`

## Search commit log
```bash
git reflog
git log --all --grep='words here'
git show --stat 0c741c707f9839dc8921c4dc2e2dc03681efae1e
```

## Edit an old commit
`git rebase -i SHA^`
Specify edit; it'll kick out, make changes, git commit then and `git rebase --continue`

## Detailed history for file (including renames)
`git log --follow -p fileNameHere`

## Get a patch from last commit
`git show HEAD > some-patch0001.patch`

## Applying a patch file
`git apply patchFileName.patch`

## Rename branch
`git branch -m currentname newname`

## Change upstream
`git branch -u origin/master`

## Clean submodules
`git submodule deinit --all -f`

## Change commit date
If you wanted to change the dates of commit `119f9ecf58069b265ab22f1f97d2b648faf932e0`, you could do so with something like this:
```
git filter-branch --env-filter \
'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
 then
   export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
   export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
 fi'
 ```

## Rewrite history after rebasing, so commit date matches author date
`git filter-branch --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE'`

This should have worked, but didn't (when doing an interactive rebase)
`git rebase -i HEAD~100 --committer-date-is-author-date`

Check with:
`git log --pretty=fuller`

## Completely remove a commit (will cause conflict if other commits reference it)
`git rebase -p --onto SHA^ SHA`

## Delete a remote (without having it locally)
`git push origin --delete branchName`

## Removing unreferenced commits (after rebasing)
```
git reflog expire --expire-unreachable=now --all
git gc --prune=now
```

`git reflog expire --expire-unreachable=now --all` removes all references of unreachable commits in reflog.
`git gc --prune=now` removes the commits themselves.

## Don't use git gc --aggressive (unless you want deltas recalculated, which could be bad)
http://stackoverflow.com/questions/28720151/git-gc-aggressive-vs-git-repack
Proper way to achieve the intended goal (per Linus mailing list)
`git repack -a -d --depth=250 --window=250`

## Creating an annotated tag
`git tag -a v1.4 -m "my version 1.4"`

## Windows - getting lots of stupid file mode changes?
`git config core.filemode false`
{{/markdown}}
    </div>
  </section>
{{/document}}
